{"ast":null,"code":"import _classCallCheck from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/alexjoo/Desktop/react-memory/src/App.js\";\n// import React from \"react\";\nimport React, { Component } from 'react'; //lets you export multiple times\n\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport pictures from \"./pictures.json\"; // import { Container, Row, Col } from 'reactstrap';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      pictures: pictures,\n      currentScore: 0,\n      highscore: 0\n    };\n\n    _this.handleCardClicked = function (id, clicked) {\n      var displayPictures = _this.state.pictures;\n\n      if (clicked) {\n        displayPictures.forEach(function (image, i) {\n          displayPictures[i].clicked = false;\n        });\n        return _this.setState({\n          pictures: pictures.sort(function () {\n            return Math.random() - 0.5;\n          })\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // checkIfClicked(id) {\n    //   // create a copy of the cards and use a random method to sort the array\n    //   let clickedCard = this.state.pictures.filter(pictures => pictures.id === id)[0];\n    //   let picturesCopy = this.state.pictures.slice().sort(function(a, b){return 0.5 - Math.random()});\n    //   // change boolean \"clicked\" to true if clicked \n    //   if (!clickedCard.clicked) {\n    //     clickedCard.clicked = true;\n    //     picturesCopy[picturesCopy.findIndex((pictures) => pictures.id === id)] = clickedCard;\n    //     // correct guess, increase score\n    //     this.setState({\n    //       pictures: picturesCopy,\n    //       currentScore: this.state.currentScore + 1,\n    //     });\n    //   }\n    //   // if a card has been clicked already, then set its click to false and reset the game\n    //   else {\n    //     let resetPicturesCopy = picturesCopy.map((pictures) => {\n    //       return {\n    //         id: pictures.id,\n    //         image: pictures.image,\n    //         clicked: false,\n    //       }\n    //     });\n    //     this.setState({\n    //       pictures: resetPicturesCopy,\n    //       currentScore: 0,\n    //     });\n    //   } \n    // }\n    // render the header, score, wrapper, and footer on the page using the current state values\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Header, {\n        currentScore: this.state.currentScore,\n        highscore: this.state.highscore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, this.state.pictures.map(function (pictures) {\n        return React.createElement(Card // clickCount={this.clickCount}\n        , {\n          onClick: _this2.checkIfClicked,\n          id: pictures.id,\n          image: pictures.image,\n          key: pictures.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; // function App() {\n//   return (\n//     <div className = \"container\">\n//       <Header />\n//       <br></br>\n//       <Container className=\"rows\">\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[0].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[1].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[2].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[3].image}/>\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[4].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[5].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[6].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[7].image}/>\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[8].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[9].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[10].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[11].image}/>\n//         </Col>\n//       </Row>\n//       </Container>\n//     </div>\n//   )\n// }\n// export default App;","map":{"version":3,"sources":["/Users/alexjoo/Desktop/react-memory/src/App.js"],"names":["React","Component","Card","Header","Wrapper","pictures","App","state","currentScore","highscore","handleCardClicked","id","clicked","displayPictures","forEach","image","i","setState","sort","Math","random","map","checkIfClicked"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAA0C;;AAE1C,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,OAAOC,QAAP,MAAqB,iBAArB,C,CACA;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACJF,MAAAA,QAAQ,EAAEA,QADN;AAEJG,MAAAA,YAAY,EAAE,CAFV;AAGJC,MAAAA,SAAS,EAAE;AAHP,K;;UAMRC,iB,GAAoB,UAACC,EAAD,EAAKC,OAAL,EAAiB;AACnC,UAAMC,eAAe,GAAG,MAAKN,KAAL,CAAWF,QAAnC;;AACA,UAAIO,OAAJ,EAAa;AACXC,QAAAA,eAAe,CAACC,OAAhB,CAAwB,UAACC,KAAD,EAAQC,CAAR,EAAa;AACnCH,UAAAA,eAAe,CAACG,CAAD,CAAf,CAAmBJ,OAAnB,GAA6B,KAA7B;AACD,SAFD;AAGA,eAAO,MAAKK,QAAL,CAAc;AACnBZ,UAAAA,QAAQ,EAAEA,QAAQ,CAACa,IAAT,CAAc;AAAA,mBAAMC,IAAI,CAACC,MAAL,KAAgB,GAAtB;AAAA,WAAd;AADS,SAAd,CAAP;AAID;AACF,K;;;;;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;6BACS;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,YAAY,EAAE,KAAKb,KAAL,CAAWC,YAAjC;AAA+C,QAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,SAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKF,KAAL,CAAWF,QAAX,CAAoBgB,GAApB,CAAwB,UAAAhB,QAAQ;AAAA,eAC/B,oBAAC,IAAD,CACA;AADA;AAEE,UAAA,OAAO,EAAE,MAAI,CAACiB,cAFhB;AAGE,UAAA,EAAE,EAAEjB,QAAQ,CAACM,EAHf;AAIE,UAAA,KAAK,EAAEN,QAAQ,CAACU,KAJlB;AAKE,UAAA,GAAG,EAAIV,QAAQ,CAACM,EALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD+B;AAAA,OAAhC,CADH,CAFF,CADF;AAgBD;;;;EAxEeV,S;;AA2ElB,eAAeK,GAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA","sourcesContent":["// import React from \"react\";\nimport React, { Component } from 'react'; //lets you export multiple times\n\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\n\nimport pictures from \"./pictures.json\";\n// import { Container, Row, Col } from 'reactstrap';\n\nclass App extends Component {      \n  state = {\n      pictures: pictures,\n      currentScore: 0,\n      highscore: 0,\n    };\n  \n  handleCardClicked = (id, clicked) => {\n    const displayPictures = this.state.pictures; \n    if (clicked) {\n      displayPictures.forEach((image, i)=> {\n        displayPictures[i].clicked = false;\n      });\n      return this.setState({\n        pictures: pictures.sort(() => Math.random() - 0.5),\n        \n      })\n    }\n  }\n\n\n  // checkIfClicked(id) {\n  //   // create a copy of the cards and use a random method to sort the array\n  //   let clickedCard = this.state.pictures.filter(pictures => pictures.id === id)[0];\n  //   let picturesCopy = this.state.pictures.slice().sort(function(a, b){return 0.5 - Math.random()});\n  //   // change boolean \"clicked\" to true if clicked \n  //   if (!clickedCard.clicked) {\n  //     clickedCard.clicked = true;\n  //     picturesCopy[picturesCopy.findIndex((pictures) => pictures.id === id)] = clickedCard;\n      \n  //     // correct guess, increase score\n  //     this.setState({\n  //       pictures: picturesCopy,\n  //       currentScore: this.state.currentScore + 1,\n  //     });\n  //   }\n    \n  //   // if a card has been clicked already, then set its click to false and reset the game\n  //   else {\n      \n  //     let resetPicturesCopy = picturesCopy.map((pictures) => {\n  //       return {\n  //         id: pictures.id,\n  //         image: pictures.image,\n  //         clicked: false,\n  //       }\n  //     });\n  //     this.setState({\n  //       pictures: resetPicturesCopy,\n  //       currentScore: 0,\n  //     });\n  //   } \n  // }\n  \n  // render the header, score, wrapper, and footer on the page using the current state values\n  render() {\n    return (\n      <div className=\"container\">\n        <Header currentScore={this.state.currentScore} highscore={this.state.highscore} />\n        <Wrapper>  \n          {this.state.pictures.map(pictures => (\n            <Card\n            // clickCount={this.clickCount}\n              onClick={this.checkIfClicked}\n              id={pictures.id}\n              image={pictures.image}\n              key = {pictures.id}\n              />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n// function App() {\n//   return (\n//     <div className = \"container\">\n//       <Header />\n//       <br></br>\n//       <Container className=\"rows\">\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[0].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[1].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[2].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[3].image}/>\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[4].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[5].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[6].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[7].image}/>\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[8].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[9].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[10].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[11].image}/>\n//         </Col>\n//       </Row>\n//       </Container>\n//     </div>\n//   )\n\n\n// }\n\n// export default App;"]},"metadata":{},"sourceType":"module"}