{"ast":null,"code":"import _classCallCheck from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/alexjoo/Desktop/react-memory/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/alexjoo/Desktop/react-memory/src/App.js\";\n// import React from \"react\";\nimport React, { Component } from 'react'; //lets you export multiple times\n\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport pictures from \"./pictures.json\"; // import { Container, Row, Col } from 'reactstrap';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.gameOver = function () {\n      if (_this.state.score > _this.state.highscore) {\n        _this.setState({\n          highscore: _this.state.score\n        }, function () {\n          console.log(this.state.highscore);\n        });\n      }\n\n      _this.state.pictures.forEach(function (card) {\n        card.count = 0;\n      });\n\n      alert(\"Game Over :( \\nscore: \".concat(_this.state.score));\n\n      _this.setState({\n        score: 0\n      });\n\n      return true;\n    };\n\n    _this.clickCount = function (id) {\n      _this.state.pictures.find(function (o, i) {\n        if (o.id === id) {\n          if (pictures[i].count === 0) {\n            pictures[i].count = pictures[i].count + 1;\n\n            _this.setState({\n              score: _this.state.score + 1\n            }, function () {\n              console.log(this.state.score);\n            });\n\n            _this.state.pictures.sort(function () {\n              return Math.random() - 0.5;\n            });\n\n            return true;\n          } else {\n            _this.gameOver();\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      pictures: pictures,\n      currentScore: 0,\n      highscore: 0\n    };\n    _this.checkIfClicked = _this.checkIfClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // checkIfClicked(id) {\n    //   // create a copy of the cards and use a random method to sort the array\n    //   let clickedCard = this.state.pictures.filter(pictures => pictures.id === id)[0];\n    //   let picturesCopy = this.state.pictures.slice().sort(function(a, b){return 0.5 - Math.random()});\n    //   // change boolean \"clicked\" to true if clicked \n    //   if (!clickedCard.clicked) {\n    //     clickedCard.clicked = true;\n    //     picturesCopy[picturesCopy.findIndex((pictures) => pictures.id === id)] = clickedCard;\n    //     // correct guess, increase score\n    //     this.setState({\n    //       pictures: picturesCopy,\n    //       currentScore: this.state.currentScore + 1,\n    //     });\n    //   }\n    //   // if a card has been clicked already, then set its click to false and reset the game\n    //   else {\n    //     let resetPicturesCopy = picturesCopy.map((pictures) => {\n    //       return {\n    //         id: pictures.id,\n    //         image: pictures.image,\n    //         clicked: false,\n    //       }\n    //     });\n    //     this.setState({\n    //       pictures: resetPicturesCopy,\n    //       currentScore: 0,\n    //     });\n    //   } \n    // }\n    // render the header, score, wrapper, and footer on the page using the current state values\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Header, {\n        currentScore: this.state.currentScore,\n        highscore: this.state.highscore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, this.state.pictures.map(function (pictures) {\n        return React.createElement(Card, {\n          clickCount: _this2.clickCount // checkIfClicked={this.checkIfClicked}\n          ,\n          id: pictures.id,\n          image: pictures.image,\n          key: pictures.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; // function App() {\n//   return (\n//     <div className = \"container\">\n//       <Header />\n//       <br></br>\n//       <Container className=\"rows\">\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[0].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[1].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[2].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[3].image}/>\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[4].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[5].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[6].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[7].image}/>\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[8].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[9].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[10].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[11].image}/>\n//         </Col>\n//       </Row>\n//       </Container>\n//     </div>\n//   )\n// }\n// export default App;","map":{"version":3,"sources":["/Users/alexjoo/Desktop/react-memory/src/App.js"],"names":["React","Component","Card","Header","Wrapper","pictures","App","props","gameOver","state","score","highscore","setState","console","log","forEach","card","count","alert","clickCount","id","find","o","i","sort","Math","random","currentScore","checkIfClicked","bind","map","image"],"mappings":"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","sourcesContent":["// import React from \"react\";\nimport React, { Component } from 'react'; //lets you export multiple times\n\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\n\nimport pictures from \"./pictures.json\";\n// import { Container, Row, Col } from 'reactstrap';\n\nclass App extends Component {  \n  constructor(props) {\n    super(props);\n    this.state = {\n      pictures: pictures,\n      currentScore: 0,\n      highscore: 0\n    };\n    this.checkIfClicked = this.checkIfClicked.bind(this);\n  }\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({highscore: this.state.score}, function() {\n        console.log(this.state.highscore);\n      });\n    }\n    this.state.pictures.forEach(card => {\n      card.count = 0;\n    });\n    alert(`Game Over :( \\nscore: ${this.state.score}`);\n    this.setState({score: 0});\n    return true;\n  }\n  \n  clickCount = id => {\n    this.state.pictures.find((o, i) => {\n      if (o.id === id) {\n        if(pictures[i].count === 0){\n          pictures[i].count = pictures[i].count + 1;\n          this.setState({score : this.state.score + 1}, function(){\n            console.log(this.state.score);\n          })\n          this.state.pictures.sort(() => Math.random() - 0.5)\n          return true; \n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n  // checkIfClicked(id) {\n  //   // create a copy of the cards and use a random method to sort the array\n  //   let clickedCard = this.state.pictures.filter(pictures => pictures.id === id)[0];\n  //   let picturesCopy = this.state.pictures.slice().sort(function(a, b){return 0.5 - Math.random()});\n  //   // change boolean \"clicked\" to true if clicked \n  //   if (!clickedCard.clicked) {\n  //     clickedCard.clicked = true;\n  //     picturesCopy[picturesCopy.findIndex((pictures) => pictures.id === id)] = clickedCard;\n      \n  //     // correct guess, increase score\n  //     this.setState({\n  //       pictures: picturesCopy,\n  //       currentScore: this.state.currentScore + 1,\n  //     });\n  //   }\n    \n  //   // if a card has been clicked already, then set its click to false and reset the game\n  //   else {\n      \n  //     let resetPicturesCopy = picturesCopy.map((pictures) => {\n  //       return {\n  //         id: pictures.id,\n  //         image: pictures.image,\n  //         clicked: false,\n  //       }\n  //     });\n  //     this.setState({\n  //       pictures: resetPicturesCopy,\n  //       currentScore: 0,\n  //     });\n  //   } \n  // }\n  \n  // render the header, score, wrapper, and footer on the page using the current state values\n  render() {\n    return (\n      <div className=\"container\">\n        <Header currentScore={this.state.currentScore} highscore={this.state.highscore} />\n        <Wrapper>  \n          {this.state.pictures.map(pictures => (\n            <Card\n            clickCount={this.clickCount}\n              // checkIfClicked={this.checkIfClicked}\n              id={pictures.id}\n              image={pictures.image}\n              key = {pictures.id}\n              />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n// function App() {\n//   return (\n//     <div className = \"container\">\n//       <Header />\n//       <br></br>\n//       <Container className=\"rows\">\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[0].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[1].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[2].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[3].image}/>\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[4].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[5].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[6].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[7].image}/>\n//         </Col>\n//       </Row>\n//       <Row>\n//         <Col xs={3} md={4}> \n//           <Card image={pictures[8].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[9].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[10].image}/>\n//         </Col>\n//         <Col xs={3} md={4}>\n//           <Card image={pictures[11].image}/>\n//         </Col>\n//       </Row>\n//       </Container>\n//     </div>\n//   )\n\n\n// }\n\n// export default App;"]},"metadata":{},"sourceType":"module"}